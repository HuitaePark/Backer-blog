name: Build and Deploy Spring Boot Application with Gradle

on:
  push:
    branches:
      - main  # 빌드 및 배포할 브랜치

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 체크아웃
      - name: Check out repository code
        uses: actions/checkout@v3

      # 2. Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐싱 (의존성 및 래퍼 캐시)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/settings.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle을 사용한 빌드 (clean build 명령어로 jar 파일 생성)
      - name: Build with Gradle
        run: ./gradlew clean build

      # 5. OCI 인스턴스에 배포
      #    OCI 인스턴스에 접근하기 위한 환경 변수(호스트, 사용자, SSH 키)는 secrets에 등록되어 있어야 합니다.
      - name: Deploy to OCI Instance
        env:
          OCI_HOST: ${{ secrets.OCI_HOST }}
          OCI_USER: ${{ secrets.OCI_USER }}
          OCI_SSH_KEY: ${{ secrets.OCI_SSH_KEY }}
        run: |
        # 빌드된 jar 파일을 OCI 인스턴스로 전송 (build/libs/ 하위에 생성된 jar 파일을 사용)
          scp -o StrictHostKeyChecking=no -i $OCI_SSH_KEY build/libs/*.jar $OCI_USER@$OCI_HOST:/path/to/deployment/
        # OCI 인스턴스에 SSH 접속하여 애플리케이션 재시작 (예시: systemctl 사용)
          ssh -o StrictHostKeyChecking=no -i $OCI_SSH_KEY $OCI_USER@$OCI_HOST 'sudo systemctl restart my-spring-app'
